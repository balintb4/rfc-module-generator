// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package glaccount.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.sap.conn.jco.ext.DestinationDataProvider;
import glaccount.util.*;
import com.sap.conn.jco.*;
import java.io.File;
import java.io.FileOutputStream;
import java.lang.System.Logger;
import java.util.*;
import org.checkerframework.common.returnsreceiver.qual.This;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class GL_ACCT_MASTER_SAVE_RFC_ extends CustomJavaAction<java.lang.String>
{
	private java.lang.String COA_KTOPL;
	private java.lang.String COA_SAKNR;
	private java.lang.String COA_KTOKS;
	private java.lang.String COA_GVTYP;
	private java.lang.String COA_BILKT;
	private java.lang.String COA_SAKAN;
	private java.lang.String COA_ERNAM;
	private java.lang.String COA_FSTAG;
	private java.util.List<IMendixObject> __COA_BUKR;
	private java.util.List<glaccount.proxies.CompanyCode> COA_BUKR;
	private java.lang.String COA_WAERS;
	private java.lang.String COA_MWSKZ;
	private java.lang.String COA_XKRES;
	private java.lang.String COA_ZUAWA;
	private java.lang.String COA_ZINRT;
	private java.lang.String COA_SPRAS;
	private java.lang.String COA_TXT20;
	private java.lang.String COA_TXT50;
	private java.lang.String COA_XBILK;
	private java.lang.String COA_FUNC_AREA;
	private java.lang.String COA_MUSTR;
	private java.lang.String COA_VBUND;
	private java.lang.String COA_XLOEV;
	private java.lang.String COA_XSPEA;
	private java.lang.String COA_XSPEB;
	private java.lang.String COA_XSPEP;
	private java.util.Date COA_ERDAT;
	private java.lang.String COA_XSALH;
	private java.lang.String COA_KDFSL;
	private java.lang.String COA_BEWGP;
	private java.lang.String COA_XMWNO;
	private java.lang.String COA_MITKZ;
	private java.lang.String COA_ALTKT;
	private java.lang.String COA_WMETH;
	private java.lang.String COA_INFKY;
	private java.lang.String COA_TOGRU;
	private java.lang.String COA_XOPVW;
	private java.lang.String COA_BEGRU;
	private java.lang.String COA_BUSAB;
	private java.lang.String COA_XINTB;
	private java.lang.String COA_XNKON;
	private java.lang.String COA_XMITK;
	private java.lang.String COA_FDLEV;
	private java.lang.String COA_XGKON;
	private java.lang.String COA_FIPOS;
	private java.lang.String COA_HBKID;
	private java.lang.String COA_VZSKZ;
	private java.lang.String COA_HKTID;
	private java.util.Date COA_ZINDT;
	private java.util.Date COA_DATLZ;
	private java.lang.String COA_RECID;
	private java.lang.String COA_XLOEB;
	private java.lang.String COA_XLGCLR;
	private java.lang.String COA_MCAKEY;
	private java.lang.String HOST;
	private java.lang.String SYSNR;
	private java.lang.String CLIENT;
	private java.lang.String USER;
	private java.lang.String PASSWD;
	private java.lang.String LANG;
	private java.lang.String Destination;
	private java.util.List<IMendixObject> __TextList;
	private java.util.List<glaccount.proxies.SKATTextShortLongText> TextList;
	private java.lang.Long BUKR_RowAmount;
	private java.lang.Long Text_Amount;

	public GL_ACCT_MASTER_SAVE_RFC_(IContext context, java.lang.String COA_KTOPL, java.lang.String COA_SAKNR, java.lang.String COA_KTOKS, java.lang.String COA_GVTYP, java.lang.String COA_BILKT, java.lang.String COA_SAKAN, java.lang.String COA_ERNAM, java.lang.String COA_FSTAG, java.util.List<IMendixObject> COA_BUKR, java.lang.String COA_WAERS, java.lang.String COA_MWSKZ, java.lang.String COA_XKRES, java.lang.String COA_ZUAWA, java.lang.String COA_ZINRT, java.lang.String COA_SPRAS, java.lang.String COA_TXT20, java.lang.String COA_TXT50, java.lang.String COA_XBILK, java.lang.String COA_FUNC_AREA, java.lang.String COA_MUSTR, java.lang.String COA_VBUND, java.lang.String COA_XLOEV, java.lang.String COA_XSPEA, java.lang.String COA_XSPEB, java.lang.String COA_XSPEP, java.util.Date COA_ERDAT, java.lang.String COA_XSALH, java.lang.String COA_KDFSL, java.lang.String COA_BEWGP, java.lang.String COA_XMWNO, java.lang.String COA_MITKZ, java.lang.String COA_ALTKT, java.lang.String COA_WMETH, java.lang.String COA_INFKY, java.lang.String COA_TOGRU, java.lang.String COA_XOPVW, java.lang.String COA_BEGRU, java.lang.String COA_BUSAB, java.lang.String COA_XINTB, java.lang.String COA_XNKON, java.lang.String COA_XMITK, java.lang.String COA_FDLEV, java.lang.String COA_XGKON, java.lang.String COA_FIPOS, java.lang.String COA_HBKID, java.lang.String COA_VZSKZ, java.lang.String COA_HKTID, java.util.Date COA_ZINDT, java.util.Date COA_DATLZ, java.lang.String COA_RECID, java.lang.String COA_XLOEB, java.lang.String COA_XLGCLR, java.lang.String COA_MCAKEY, java.lang.String HOST, java.lang.String SYSNR, java.lang.String CLIENT, java.lang.String USER, java.lang.String PASSWD, java.lang.String LANG, java.lang.String Destination, java.util.List<IMendixObject> TextList, java.lang.Long BUKR_RowAmount, java.lang.Long Text_Amount)
	{
		super(context);
		this.COA_KTOPL = COA_KTOPL;
		this.COA_SAKNR = COA_SAKNR;
		this.COA_KTOKS = COA_KTOKS;
		this.COA_GVTYP = COA_GVTYP;
		this.COA_BILKT = COA_BILKT;
		this.COA_SAKAN = COA_SAKAN;
		this.COA_ERNAM = COA_ERNAM;
		this.COA_FSTAG = COA_FSTAG;
		this.__COA_BUKR = COA_BUKR;
		this.COA_WAERS = COA_WAERS;
		this.COA_MWSKZ = COA_MWSKZ;
		this.COA_XKRES = COA_XKRES;
		this.COA_ZUAWA = COA_ZUAWA;
		this.COA_ZINRT = COA_ZINRT;
		this.COA_SPRAS = COA_SPRAS;
		this.COA_TXT20 = COA_TXT20;
		this.COA_TXT50 = COA_TXT50;
		this.COA_XBILK = COA_XBILK;
		this.COA_FUNC_AREA = COA_FUNC_AREA;
		this.COA_MUSTR = COA_MUSTR;
		this.COA_VBUND = COA_VBUND;
		this.COA_XLOEV = COA_XLOEV;
		this.COA_XSPEA = COA_XSPEA;
		this.COA_XSPEB = COA_XSPEB;
		this.COA_XSPEP = COA_XSPEP;
		this.COA_ERDAT = COA_ERDAT;
		this.COA_XSALH = COA_XSALH;
		this.COA_KDFSL = COA_KDFSL;
		this.COA_BEWGP = COA_BEWGP;
		this.COA_XMWNO = COA_XMWNO;
		this.COA_MITKZ = COA_MITKZ;
		this.COA_ALTKT = COA_ALTKT;
		this.COA_WMETH = COA_WMETH;
		this.COA_INFKY = COA_INFKY;
		this.COA_TOGRU = COA_TOGRU;
		this.COA_XOPVW = COA_XOPVW;
		this.COA_BEGRU = COA_BEGRU;
		this.COA_BUSAB = COA_BUSAB;
		this.COA_XINTB = COA_XINTB;
		this.COA_XNKON = COA_XNKON;
		this.COA_XMITK = COA_XMITK;
		this.COA_FDLEV = COA_FDLEV;
		this.COA_XGKON = COA_XGKON;
		this.COA_FIPOS = COA_FIPOS;
		this.COA_HBKID = COA_HBKID;
		this.COA_VZSKZ = COA_VZSKZ;
		this.COA_HKTID = COA_HKTID;
		this.COA_ZINDT = COA_ZINDT;
		this.COA_DATLZ = COA_DATLZ;
		this.COA_RECID = COA_RECID;
		this.COA_XLOEB = COA_XLOEB;
		this.COA_XLGCLR = COA_XLGCLR;
		this.COA_MCAKEY = COA_MCAKEY;
		this.HOST = HOST;
		this.SYSNR = SYSNR;
		this.CLIENT = CLIENT;
		this.USER = USER;
		this.PASSWD = PASSWD;
		this.LANG = LANG;
		this.Destination = Destination;
		this.__TextList = TextList;
		this.BUKR_RowAmount = BUKR_RowAmount;
		this.Text_Amount = Text_Amount;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		this.COA_BUKR = java.util.Optional.ofNullable(this.__COA_BUKR)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__COA_BUKRElement -> glaccount.proxies.CompanyCode.initialize(getContext(), __COA_BUKRElement))
			.collect(java.util.stream.Collectors.toList());

		this.TextList = java.util.Optional.ofNullable(this.__TextList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(__TextListElement -> glaccount.proxies.SKATTextShortLongText.initialize(getContext(), __TextListElement))
			.collect(java.util.stream.Collectors.toList());

		// BEGIN USER CODE
y		  System.out.println("at start");

		  

	        String RFC_NAME = "GL_ACCT_MASTER_SAVE_RFC";

			// als parameter mitgeben wie die anderen werte. Im Microflow die constanten rausholen und Über die Private Cloud sollte man die Constanten setzen.
	        Properties connectProperties = new Properties();
	            connectProperties.setProperty(DestinationDataProvider.JCO_ASHOST, this.HOST ); // Hostname des SAP-Systems
	            connectProperties.setProperty(DestinationDataProvider.JCO_SYSNR, this.SYSNR ); // Systemnummer
	            connectProperties.setProperty(DestinationDataProvider.JCO_CLIENT, this.CLIENT ); // Mandantennummer
	            connectProperties.setProperty(DestinationDataProvider.JCO_USER, this.USER ); // Benutzername
	            connectProperties.setProperty(DestinationDataProvider.JCO_PASSWD, this.PASSWD ); // Passwort
	            connectProperties.setProperty(DestinationDataProvider.JCO_LANG, this.LANG ); // Sprache


	             try {            
	            	 
	            	 
	            	 MyDestinationDataProvider myDestinationDataProvider = new MyDestinationDataProvider();
	            	 myDestinationDataProvider.addDestination( this.Destination, connectProperties );

	            	 if (!com.sap.conn.jco.ext.Environment.isDestinationDataProviderRegistered()) {
		            	  
	            		 com.sap.conn.jco.ext.Environment.registerDestinationDataProvider(myDestinationDataProvider);
	            	  
	            	 }
				      
					  JCoDestination destination = JCoDestinationManager.getDestination(this.Destination);
					  

	                    JCoFunction function = destination.getRepository().getFunction(RFC_NAME);
	                    if (function == null) {
	                        throw new RuntimeException("RFC '" + RFC_NAME + "' not found in SAP.");
	                    }

	                    // Set input parameters
	                    JCoParameterList changingParams = function.getChangingParameterList();
	                    JCoParameterList inputParams = function.getImportParameterList();
	                   

	 
	                 // Account COA 
	                 JCoStructure account_coa = changingParams.getStructure("ACCOUNT_COA");
	                 JCoMetaData tempMetaCoa = account_coa.getRecordMetaData();

	                 JCoStructure account_coa_keyy = account_coa.getStructure("KEYY");
	                 account_coa_keyy.setValue("KTOPL",this.COA_KTOPL);
	                 account_coa_keyy.setValue("SAKNR","0000"+this.COA_SAKNR);

	                 JCoStructure account_coa_data = account_coa.getStructure("DATA");
	                 account_coa_data.setValue("KTOKS",this.COA_KTOKS);
	                 account_coa_data.setValue("XBILK",this.COA_XBILK);
	                 account_coa_data.setValue("GVTYP",this.COA_GVTYP);
	                 account_coa_data.setValue("FUNC_AREA",this.COA_FUNC_AREA);
	                 account_coa_data.setValue("MUSTR",this.COA_MUSTR);
	                 account_coa_data.setValue("VBUND",this.COA_VBUND);
	                 account_coa_data.setValue("BILKT",this.COA_BILKT);
	                 account_coa_data.setValue("XLOEV",this.COA_XLOEV);
	                 account_coa_data.setValue("XSPEA",this.COA_XSPEA);
	                 account_coa_data.setValue("XSPEB",this.COA_XSPEB);
	                 account_coa_data.setValue("XSPEP",this.COA_XSPEP);
	                 
	                 JCoStructure account_coa_info = account_coa.getStructure("INFO");
	                 account_coa_info.setValue("ERDAT",this.COA_ERDAT);
	                 account_coa_info.setValue("ERNAM",this.COA_ERNAM);
	                 account_coa_info.setValue("SAKAN",this.COA_SAKAN);
	                 
	                 account_coa.setValue("ACTION","I");

	              // Account Names
	                 JCoTable account_names = changingParams.getTable("ACCOUNT_NAMES");
	                 
	                 if(account_names.isEmpty()){
	                	 
	                	 account_names.appendRows(Text_Amount.intValue());
	                	 account_names.setRow(0);
		                 }
		                 else {
		                	 account_names.appendRows(Text_Amount.intValue()-1);
		                	 account_names.setRow(0);
		                 }
	                 JCoMetaData tempMetaNames = account_names.getRecordMetaData();
	                 
	                 IContext c = getContext();
	                 
	                 
	                 for(int i = 0; i < Text_Amount.intValue(); i++){
	                	 
	                	 JCoStructure account_names_keyy = account_names.getStructure("KEYY");
		                 account_names_keyy.setValue("KTOPL",this.COA_KTOPL);
		                 account_names_keyy.setValue("SAKNR","0000"+this.COA_SAKNR);
		                 account_names_keyy.setValue("SPRAS",TextList.get(i).getLanguageKey());
		                 
		                 JCoStructure account_names_data = account_names.getStructure("DATA");
		                 account_names_data.setValue("TXT20",TextList.get(i).getGLAccountShoartText());
		                 account_names_data.setValue("TXT50",TextList.get(i).getGLAccountLongText());

		                 account_names.setValue("ACTION","I");
		                 
		                 account_names.nextRow();
	                	 
	                 }
	                 
	                 
	                 
	                 
	 
	              // Account Codes
	                 JCoTable account_codes = changingParams.getTable("ACCOUNT_CCODES");
	                 JCoMetaData tempMetaCodes = account_codes.getRecordMetaData();
	                 
	                 if(account_codes.isEmpty()){
	                	 
	                 account_codes.appendRows(BUKR_RowAmount.intValue());
	                 account_codes.setRow(0);
	                 }
	                 else {
	                	 account_codes.appendRows(BUKR_RowAmount.intValue()-1);
	                	 account_codes.setRow(0);
	                 }
	                 
	                 
	                 
	                 
	                 
	                 
	                 
	                 
	                 
	                 
	            
	                 for(int i = 0; i < BUKR_RowAmount.intValue(); i++)
	                	 
	                 {
	                	 
	                	 
	                	 JCoStructure account_codes_keyy = account_codes.getStructure("KEYY");
	                	 account_codes_keyy.setValue("BUKRS", COA_BUKR.get(i).getCompanyCode());
	                	 account_codes_keyy.setValue("SAKNR","0000"+this.COA_SAKNR);
	                	 
	                	 JCoStructure account_codes_data = account_codes.getStructure("DATA");
		                 account_codes_data.setValue("WAERS",this.COA_WAERS);
		                 account_codes_data.setValue("XSALH",this.COA_XSALH);
		                 account_codes_data.setValue("KDFSL",this.COA_KDFSL);
		                 account_codes_data.setValue("BEWGP",this.COA_BEWGP);
		                 account_codes_data.setValue("MWSKZ",this.COA_MWSKZ);
		                 account_codes_data.setValue("XMWNO",this.COA_XMWNO);
		                 account_codes_data.setValue("MITKZ",this.COA_MITKZ);
		                 account_codes_data.setValue("ALTKT",this.COA_ALTKT);
		                 account_codes_data.setValue("WMETH",this.COA_WMETH);
		                 account_codes_data.setValue("INFKY",this.COA_INFKY);
		                 account_codes_data.setValue("TOGRU",this.COA_TOGRU);
		                 account_codes_data.setValue("XOPVW",this.COA_XOPVW);
		                 account_codes_data.setValue("XKRES",this.COA_XKRES);
		                 account_codes_data.setValue("ZUAWA",this.COA_ZUAWA);
		                 account_codes_data.setValue("BEGRU",this.COA_BEGRU);
		                 account_codes_data.setValue("BUSAB",this.COA_BUSAB);
		                 account_codes_data.setValue("FSTAG",this.COA_FSTAG);
		                 account_codes_data.setValue("XINTB",this.COA_XINTB);
		                 account_codes_data.setValue("XNKON",this.COA_XNKON);
		                 account_codes_data.setValue("XMITK",this.COA_XMITK);
		                 account_codes_data.setValue("FDLEV",this.COA_FDLEV);
		                 account_codes_data.setValue("XGKON",this.COA_XGKON);
		                 account_codes_data.setValue("FIPOS",this.COA_FIPOS);
		                 account_codes_data.setValue("HBKID",this.COA_HBKID);
		                 account_codes_data.setValue("HKTID",this.COA_HKTID);
		                 account_codes_data.setValue("VZSKZ",this.COA_VZSKZ);
		                 account_codes_data.setValue("ZINDT",this.COA_ZINDT);
		                 account_codes_data.setValue("ZINRT",this.COA_ZINRT);
		                 account_codes_data.setValue("DATLZ",this.COA_DATLZ);
		                 account_codes_data.setValue("RECID",this.COA_RECID);
		                 account_codes_data.setValue("XSPEB",this.COA_XSPEB);
		                 account_codes_data.setValue("XLOEB",this.COA_XLOEB);
		                 account_codes_data.setValue("XLGCLR",this.COA_XLGCLR);
		                 account_codes_data.setValue("MCAKEY",this.COA_MCAKEY);
		                 account_codes_data.setValue("ZINRT",this.COA_ZINRT);
		                 
		                 JCoStructure account_codes_info = account_codes.getStructure("INFO");
		                 account_codes_info.setValue("ERDAT",this.COA_ERDAT);
		                 account_codes_info.setValue("ERNAM",this.COA_ERNAM);
		                 
		                 
		                 account_codes.setValue("ACTION","I");  
		                 
		                 account_codes.nextRow();
		                 
		                 }
	                	 
	                 
					/* 	 
					//Account_Keywords
	                 JCoTable account_keywords = changingParams.getTable("ACCOUNT_KEYWORDS");
	                 
	                 if(account_keywords.isEmpty()){
	                	 
	                	 account_keywords.appendRows(Text_Amount.intValue());
	                	 account_keywords.setRow(0);
		                 }
		                 else {
		                	 account_keywords.appendRows(Text_Amount.intValue()-1);
		                	 account_keywords.setRow(0);
		                 }
	                 
	                 
	               
	                 
	                 
	                 for(int i = 0; i < Text_Amount.intValue(); i++){
	                	 
	                	 
	                	 account_keywords.setValue("KTOPL",this.COA_KTOPL);
	                	 account_keywords.setValue("SAKNR","0000"+this.COA_SAKNR);
	                	 account_keywords.setValue("SPRAS",TextList.get(i).getLanguageKey());
		                
	                	 account_keywords.setValue("SCHLW",TextList.get(i).getGLAccountShortText());

	                	 account_keywords.setValue("ACTION","I");
		                 
	                	 account_keywords.nextRow();
	                	 
	                 }
					 */
	                 
	                 
	                 
	                 
	                 
	                 account_codes.getNumRows();
  
	                 function.execute(destination);

	            	 

	                    // Process output parameters
	                    AbapException[] outputParams = function.getExceptionList();
	                    JCoTable returnTable = changingParams.getTable("RETURN");
	                    
	                   

	                    JCoContext.end(destination);
	                    
	                    return returnTable.toString();
	                } catch (JCoException e) {
	                    e.printStackTrace();
	                }
	             return "" ;
	


		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GL_ACCT_MASTER_SAVE_RFC_";
	}

	// BEGIN EXTRA CODE

	// END EXTRA CODE
}
